<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:framework="clr-namespace:Hextasy.Framework;assembly=Hextasy.Framework"
                    xmlns:cardWars="clr-namespace:Hextasy.CardWars"
                    xmlns:cal="http://www.caliburnproject.org">

  <framework:DoubleMultiplierConverter x:Key="DoubleMultiplierConverter" />

  <Storyboard x:Key="CrosshairStoryboard" RepeatBehavior="Forever">
    <DoubleAnimation Storyboard.TargetName="Crosshair"
                       Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
                       From="1" To="1.1" Duration="0:0:1" >
      <DoubleAnimation.EasingFunction>
        <ElasticEase Oscillations="3" EasingMode="EaseOut"/>
      </DoubleAnimation.EasingFunction>
    </DoubleAnimation>
    <DoubleAnimation Storyboard.TargetName="Crosshair"
                       Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
                       From="1" To="1.1" Duration="0:0:1" >
      <DoubleAnimation.EasingFunction>
        <ElasticEase Oscillations="3" EasingMode="EaseOut"/>
      </DoubleAnimation.EasingFunction>
    </DoubleAnimation>
  </Storyboard>

  <Storyboard x:Key="CardPlacementStoryboard" RepeatBehavior="Forever">
    <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
                       From="1" To="1.1" Duration="0:0:1">
      <DoubleAnimation.EasingFunction>
        <ElasticEase Oscillations="3" EasingMode="EaseOut"/>
      </DoubleAnimation.EasingFunction>
    </DoubleAnimation>
    <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
                       From="1" To="1.1" Duration="0:0:1" >
      <DoubleAnimation.EasingFunction>
        <ElasticEase Oscillations="3" EasingMode="EaseOut"/>
      </DoubleAnimation.EasingFunction>
    </DoubleAnimation>
  </Storyboard>

  <Style x:Key="CardSelectionContainerStyle" TargetType="{x:Type ListBoxItem}">
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <Border x:Name="TemplateBorder" Width="350" Height="54"
                           RenderTransformOrigin="0.5, 0.5" Margin="2"
                          Background="BurlyWood" CornerRadius="10" BorderBrush="Black" BorderThickness="2">
            <Border.RenderTransform>
              <ScaleTransform/>
            </Border.RenderTransform>
            <ContentPresenter/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="RenderTransform">
                <Setter.Value>
                  <ScaleTransform CenterX="185" CenterY="25"/>
                </Setter.Value>
              </Setter>
              <Trigger.EnterActions>
                <BeginStoryboard>
                  <BeginStoryboard.Storyboard>
                    <Storyboard>
                      <DoubleAnimation
                              Storyboard.TargetProperty="(Border.RenderTransform).(ScaleTransform.ScaleX)"
                              To="1.04" Duration="0:0:0.12" >
                      </DoubleAnimation>
                      <DoubleAnimation
                              Storyboard.TargetProperty="(Border.RenderTransform).(ScaleTransform.ScaleY)"
                              To="1.04" Duration="0:0:0.12" >
                      </DoubleAnimation>
                    </Storyboard>
                  </BeginStoryboard.Storyboard>
                </BeginStoryboard>
              </Trigger.EnterActions>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
              <Setter TargetName="TemplateBorder" Property="Background" Value="#FFF79800"/>
              <Setter Property="RenderTransform">
                <Setter.Value>
                  <ScaleTransform CenterX="185" CenterY="25"/>
                </Setter.Value>
              </Setter>
              <Trigger.EnterActions>
                <BeginStoryboard>
                  <BeginStoryboard.Storyboard>
                    <Storyboard>
                      <DoubleAnimation
                              Storyboard.TargetProperty="(Border.RenderTransform).(ScaleTransform.ScaleX)"
                              To="1.04" Duration="0:0:0.12" >
                      </DoubleAnimation>
                      <DoubleAnimation
                              Storyboard.TargetProperty="(Border.RenderTransform).(ScaleTransform.ScaleY)"
                              To="1.04" Duration="0:0:0.12" >
                      </DoubleAnimation>
                    </Storyboard>
                  </BeginStoryboard.Storyboard>
                </BeginStoryboard>
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <BeginStoryboard>
                  <BeginStoryboard.Storyboard>
                    <Storyboard>
                      <DoubleAnimation
                              Storyboard.TargetProperty="(Border.RenderTransform).(ScaleTransform.ScaleX)"
                              To="1" Duration="0:0:0.12" >
                      </DoubleAnimation>
                      <DoubleAnimation
                              Storyboard.TargetProperty="(Border.RenderTransform).(ScaleTransform.ScaleY)"
                              To="1" Duration="0:0:0.12" >
                      </DoubleAnimation>
                    </Storyboard>
                  </BeginStoryboard.Storyboard>
                </BeginStoryboard>
              </Trigger.ExitActions>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="HexagonButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="BorderBrush" Value="Black"/>
    <Setter Property="BorderThickness" Value="29"/>
    <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid>
            <Path Margin="1" 
                    StrokeThickness="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Button}, 
                        Path=ActualHeight, Converter={StaticResource DoubleMultiplierConverter},ConverterParameter=0.05}"
                    Stroke="Gray" 
                    Fill="{TemplateBinding Background}" 
                    HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" 
                    Height="Auto" x:Name="Path" Stretch="Fill"
                    RenderTransformOrigin="0.5, 0.5"
                    Data="M 250,0 L 750,0 L 1000,433 L 750,866 L 250,866 L 0,433 Z">
            </Path>
            <Path Margin="1" 
                    Fill="WhiteSmoke" 
                    HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" 
                    Height="Auto" x:Name="Overlay" Stretch="Fill" Opacity="0"
                    RenderTransformOrigin="0.5, 0.5"
                    Data="M 250,0 L 750,0 L 1000,433 L 750,866 L 250,866 L 0,433 Z">
            </Path>
            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
            <Image x:Name="Crosshair" Stretch="Uniform" 
                     Margin="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Button}, 
                        Path=ActualHeight, Converter={StaticResource DoubleMultiplierConverter},ConverterParameter=0.20}"
                     Source="Images\crosshair.png" Opacity="0" RenderTransformOrigin="0.5, 0.5">
              <Image.RenderTransform>
                <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="1" ScaleY="1"/>
              </Image.RenderTransform>
            </Image>
          </Grid>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Owner}" Value="Player1">
              <Setter TargetName="Path" Property="Stroke" Value="Red"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Owner}" Value="Player2">
              <Setter TargetName="Path" Property="Stroke" Value="Blue"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Card.IsExhausted}" Value="False">
              <Setter TargetName="Path" Property="Fill" Value="GreenYellow"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsSelected}" Value="True">
              <Setter TargetName="Path" Property="Fill" Value="Orange"/>
            </DataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Overlay" Property="Opacity" Value="0.5"/>
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type UserControl}}, Path=DataContext.IsInTargetMode}"
                             Value="True"/>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="Crosshair" Property="Opacity" Value="1"/>
              <MultiDataTrigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource CrosshairStoryboard}"/>
              </MultiDataTrigger.EnterActions>
            </MultiDataTrigger>

            <Trigger Property="IsPressed" Value="True">
              <Setter Property="RenderTransform">
                <Setter.Value>
                  <ScaleTransform ScaleX="0.95" ScaleY="0.95"/>
                </Setter.Value>
              </Setter>
              <Setter TargetName="Overlay" Property="Opacity" Value="0.5"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <DataTemplate DataType="{x:Type cardWars:CardWarsTile}">
    <Button x:Name="B1" Style="{StaticResource HexagonButtonStyle}" Background="LightGray"
                    cal:Message.Attach="[Event Click] = [Action OnTileClick($dataContext)];[Event MouseEnter] = [Action OnTileEnter($dataContext)];[Event MouseLeave] = [Action OnTileLeave($dataContext)]">
      <Button.Content>
        <Grid>
          <Grid.RowDefinitions>
            <RowDefinition Height="3*"/>
            <RowDefinition Height="2*"/>
            <RowDefinition Height="3*"/>
          </Grid.RowDefinitions>
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="20*"/>
            <ColumnDefinition Width="35*"/>
            <ColumnDefinition Width="20*"/>
          </Grid.ColumnDefinitions>

          <Image x:Name="CardImage" 
                   Source="{Binding Card.ImageSource}" Grid.ColumnSpan="3" Grid.RowSpan="3" 
                   Margin="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Button}, 
                        Path=ActualHeight, Converter={StaticResource DoubleMultiplierConverter},ConverterParameter=0.15}"
                   RenderTransformOrigin="0.5, 0.5">
            <Image.RenderTransform>
              <ScaleTransform/>
            </Image.RenderTransform>
            <Image.Style>
              <Style>
                <Style.Triggers>
                  <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                      <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type UserControl}}, Path=DataContext.IsInCardPlacementMode}"
                             Value="True"/>
                      <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Button}}, Path=IsMouseOver}" Value="True"/>
                      <Condition Binding="{Binding IsFixed}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.EnterActions>
                      <BeginStoryboard Name="SB1" Storyboard="{StaticResource CardPlacementStoryboard}"/>
                    </MultiDataTrigger.EnterActions>
                    <MultiDataTrigger.ExitActions>
                      <StopStoryboard BeginStoryboardName="SB1"/>
                    </MultiDataTrigger.ExitActions>
                  </MultiDataTrigger>
                </Style.Triggers>
              </Style>
            </Image.Style>
          </Image>

          <Viewbox Grid.Row="1" Grid.Column="0" StretchDirection="Both" Stretch="Uniform">
            <TextBlock Text="{Binding Card.Attack}" FontWeight="Bold"
                           HorizontalAlignment="Center" VerticalAlignment="Center">
              <TextBlock.Style>
                <Style>
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding Card.HasIncreasedAttack}" Value="True">
                      <Setter  Property="TextBlock.Foreground" Value="LimeGreen"></Setter>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Card.HasDecreasedAttack}" Value="True">
                      <Setter  Property="TextBlock.Foreground" Value="Red"></Setter>
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </TextBlock.Style>
            </TextBlock>
          </Viewbox>

          <Viewbox Grid.Row="1" Grid.Column="2" StretchDirection="Both" Stretch="Uniform">
            <TextBlock Text="{Binding Card.Health}" FontWeight="Bold"
                           HorizontalAlignment="Center" VerticalAlignment="Center">
              <TextBlock.Style>
                <Style>
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding Card.HasIncreasedHealth}" Value="True">
                      <Setter  Property="TextBlock.Foreground" Value="LimeGreen"></Setter>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Card.HasDecreasedHealth}" Value="True">
                      <Setter  Property="TextBlock.Foreground" Value="Red"></Setter>
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </TextBlock.Style>
            </TextBlock>
          </Viewbox>

        </Grid>
      </Button.Content>
    </Button>
  </DataTemplate>
  
</ResourceDictionary>